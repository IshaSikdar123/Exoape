{"ast":null,"code":"import t from \"lenis\";\nfunction s() {\n  return s = Object.assign ? Object.assign.bind() : function (t) {\n    for (var s = 1; s < arguments.length; s++) {\n      var e = arguments[s];\n      for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);\n    }\n    return t;\n  }, s.apply(this, arguments);\n}\nclass e {\n  constructor(_ref) {\n    let {\n      scrollElements: t,\n      rootMargin: s = \"-1px -1px -1px -1px\",\n      IORaf: e\n    } = _ref;\n    this.scrollElements = void 0, this.rootMargin = void 0, this.IORaf = void 0, this.observer = void 0, this.scrollElements = t, this.rootMargin = s, this.IORaf = e, this._init();\n  }\n  _init() {\n    this.observer = new IntersectionObserver(t => {\n      t.forEach(t => {\n        const s = this.scrollElements.find(s => s.$el === t.target);\n        t.isIntersecting ? (s && (s.isAlreadyIntersected = !0), this._setInview(t)) : s && s.isAlreadyIntersected && this._setOutOfView(t);\n      });\n    }, {\n      rootMargin: this.rootMargin\n    });\n    for (const t of this.scrollElements) this.observe(t.$el);\n  }\n  destroy() {\n    this.observer.disconnect();\n  }\n  observe(t) {\n    t && this.observer.observe(t);\n  }\n  unobserve(t) {\n    t && this.observer.unobserve(t);\n  }\n  _setInview(t) {\n    const s = this.scrollElements.find(s => s.$el === t.target);\n    this.IORaf && (null == s || s.setInteractivityOn()), !this.IORaf && (null == s || s.setInview());\n  }\n  _setOutOfView(t) {\n    const s = this.scrollElements.find(s => s.$el === t.target);\n    this.IORaf && (null == s || s.setInteractivityOff()), !this.IORaf && (null == s || s.setOutOfView()), null != s && s.attributes.scrollRepeat || this.IORaf || this.unobserve(t.target);\n  }\n}\nfunction i(t, s, e, i, r) {\n  return e + ((r - t) / (s - t) * (i - e) || 0);\n}\nfunction r(t, s) {\n  return t.reduce((t, e) => Math.abs(e - s) < Math.abs(t - s) ? e : t);\n}\nclass l {\n  constructor(_ref2) {\n    let {\n      $el: t,\n      id: s,\n      modularInstance: e,\n      subscribeElementUpdateFn: i,\n      unsubscribeElementUpdateFn: r,\n      needRaf: l,\n      scrollOrientation: n\n    } = _ref2;\n    var o, a, c, h, d;\n    this.$el = void 0, this.id = void 0, this.needRaf = void 0, this.attributes = void 0, this.scrollOrientation = void 0, this.isAlreadyIntersected = void 0, this.intersection = void 0, this.metrics = void 0, this.currentScroll = void 0, this.translateValue = void 0, this.progress = void 0, this.lastProgress = void 0, this.modularInstance = void 0, this.progressModularModules = void 0, this.isInview = void 0, this.isInteractive = void 0, this.isInFold = void 0, this.isFirstResize = void 0, this.subscribeElementUpdateFn = void 0, this.unsubscribeElementUpdateFn = void 0, this.$el = t, this.id = s, this.needRaf = l, this.scrollOrientation = n, this.modularInstance = e, this.subscribeElementUpdateFn = i, this.unsubscribeElementUpdateFn = r, this.attributes = {\n      scrollClass: null != (o = this.$el.dataset.scrollClass) ? o : \"is-inview\",\n      scrollOffset: null != (a = this.$el.dataset.scrollOffset) ? a : \"0,0\",\n      scrollPosition: null != (c = this.$el.dataset.scrollPosition) ? c : \"start,end\",\n      scrollModuleProgress: null != this.$el.dataset.scrollModuleProgress,\n      scrollCssProgress: null != this.$el.dataset.scrollCssProgress,\n      scrollEventProgress: null != (h = this.$el.dataset.scrollEventProgress) ? h : null,\n      scrollSpeed: null != this.$el.dataset.scrollSpeed ? parseFloat(this.$el.dataset.scrollSpeed) : null,\n      scrollRepeat: null != this.$el.dataset.scrollRepeat,\n      scrollCall: null != (d = this.$el.dataset.scrollCall) ? d : null,\n      scrollCallSelf: null != this.$el.dataset.scrollCallSelf,\n      scrollIgnoreFold: null != this.$el.dataset.scrollIgnoreFold,\n      scrollEnableTouchSpeed: null != this.$el.dataset.scrollEnableTouchSpeed\n    }, this.intersection = {\n      start: 0,\n      end: 0\n    }, this.metrics = {\n      offsetStart: 0,\n      offsetEnd: 0,\n      bcr: {}\n    }, this.currentScroll = \"vertical\" === this.scrollOrientation ? window.scrollY : window.scrollX, this.translateValue = 0, this.progress = 0, this.lastProgress = null, this.progressModularModules = [], this.isInview = !1, this.isInteractive = !1, this.isAlreadyIntersected = !1, this.isInFold = !1, this.isFirstResize = !0, this._init();\n  }\n  _init() {\n    this.needRaf && (this.modularInstance && this.attributes.scrollModuleProgress && this._getProgressModularModules(), this._resize());\n  }\n  onResize(_ref3) {\n    let {\n      currentScroll: t\n    } = _ref3;\n    this.currentScroll = t, this._resize();\n  }\n  onRender(_ref4) {\n    let {\n      currentScroll: t,\n      smooth: s\n    } = _ref4;\n    const e = \"vertical\" === this.scrollOrientation ? window.innerHeight : window.innerWidth;\n    if (this.currentScroll = t, this._computeProgress(), this.attributes.scrollSpeed && !isNaN(this.attributes.scrollSpeed)) if (this.attributes.scrollEnableTouchSpeed || s) {\n      if (this.isInFold) {\n        const t = Math.max(0, this.progress);\n        this.translateValue = t * e * this.attributes.scrollSpeed * -1;\n      } else {\n        const t = i(0, 1, -1, 1, this.progress);\n        this.translateValue = t * e * this.attributes.scrollSpeed * -1;\n      }\n      this.$el.style.transform = \"vertical\" === this.scrollOrientation ? \"translate3d(0, \".concat(this.translateValue, \"px, 0)\") : \"translate3d(\".concat(this.translateValue, \"px, 0, 0)\");\n    } else this.translateValue && (this.$el.style.transform = \"translate3d(0, 0, 0)\"), this.translateValue = 0;\n  }\n  setInview() {\n    if (this.isInview) return;\n    this.isInview = !0, this.$el.classList.add(this.attributes.scrollClass);\n    const t = this._getScrollCallFrom();\n    this.attributes.scrollCall && this._dispatchCall(\"enter\", t);\n  }\n  setOutOfView() {\n    if (!this.isInview || !this.attributes.scrollRepeat) return;\n    this.isInview = !1, this.$el.classList.remove(this.attributes.scrollClass);\n    const t = this._getScrollCallFrom();\n    this.attributes.scrollCall && this._dispatchCall(\"leave\", t);\n  }\n  setInteractivityOn() {\n    this.isInteractive || (this.isInteractive = !0, this.subscribeElementUpdateFn(this));\n  }\n  setInteractivityOff() {\n    this.isInteractive && (this.isInteractive = !1, this.unsubscribeElementUpdateFn(this), null != this.lastProgress && this._computeProgress(r([0, 1], this.lastProgress)));\n  }\n  _resize() {\n    this.metrics.bcr = this.$el.getBoundingClientRect(), this._computeMetrics(), this._computeIntersection(), this.isFirstResize && (this.isFirstResize = !1, this.isInFold && this.setInview());\n  }\n  _computeMetrics() {\n    const {\n        top: t,\n        left: s,\n        height: e,\n        width: i\n      } = this.metrics.bcr,\n      r = \"vertical\" === this.scrollOrientation ? window.innerHeight : window.innerWidth,\n      l = \"vertical\" === this.scrollOrientation ? e : i;\n    this.metrics.offsetStart = this.currentScroll + (\"vertical\" === this.scrollOrientation ? t : s) - this.translateValue, this.metrics.offsetEnd = this.metrics.offsetStart + l, this.isInFold = this.metrics.offsetStart < r && !this.attributes.scrollIgnoreFold;\n  }\n  _computeIntersection() {\n    const t = \"vertical\" === this.scrollOrientation ? window.innerHeight : window.innerWidth,\n      s = \"vertical\" === this.scrollOrientation ? this.metrics.bcr.height : this.metrics.bcr.width,\n      e = this.attributes.scrollOffset.split(\",\"),\n      i = null != e[0] ? e[0].trim() : \"0\",\n      r = null != e[1] ? e[1].trim() : \"0\",\n      l = this.attributes.scrollPosition.split(\",\");\n    let n = null != l[0] ? l[0].trim() : \"start\";\n    const o = null != l[1] ? l[1].trim() : \"end\",\n      a = i.includes(\"%\") ? t * parseInt(i.replace(\"%\", \"\").trim()) * .01 : parseInt(i),\n      c = r.includes(\"%\") ? t * parseInt(r.replace(\"%\", \"\").trim()) * .01 : parseInt(r);\n    switch (this.isInFold && (n = \"fold\"), n) {\n      case \"start\":\n      default:\n        this.intersection.start = this.metrics.offsetStart - t + a;\n        break;\n      case \"middle\":\n        this.intersection.start = this.metrics.offsetStart - t + a + .5 * s;\n        break;\n      case \"end\":\n        this.intersection.start = this.metrics.offsetStart - t + a + s;\n        break;\n      case \"fold\":\n        this.intersection.start = 0;\n    }\n    switch (o) {\n      case \"start\":\n        this.intersection.end = this.metrics.offsetStart - c;\n        break;\n      case \"middle\":\n        this.intersection.end = this.metrics.offsetStart - c + .5 * s;\n        break;\n      default:\n        this.intersection.end = this.metrics.offsetStart - c + s;\n    }\n    if (this.intersection.end <= this.intersection.start) switch (o) {\n      case \"start\":\n      default:\n        this.intersection.end = this.intersection.start + 1;\n        break;\n      case \"middle\":\n        this.intersection.end = this.intersection.start + .5 * s;\n        break;\n      case \"end\":\n        this.intersection.end = this.intersection.start + s;\n    }\n  }\n  _computeProgress(t) {\n    const s = null != t ? t : (e = i(this.intersection.start, this.intersection.end, 0, 1, this.currentScroll)) < 0 ? 0 : e > 1 ? 1 : e;\n    var e;\n    if (this.progress = s, s != this.lastProgress) {\n      if (this.lastProgress = s, this.attributes.scrollCssProgress && this._setCssProgress(s), this.attributes.scrollEventProgress && this._setCustomEventProgress(s), this.attributes.scrollModuleProgress) for (const t of this.progressModularModules) this.modularInstance && this.modularInstance.call(\"onScrollProgress\", s, t.moduleName, t.moduleId);\n      s > 0 && s < 1 && this.setInview(), 0 === s && this.setOutOfView(), 1 === s && this.setOutOfView();\n    }\n  }\n  _setCssProgress() {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this.$el.style.setProperty(\"--progress\", t.toString());\n  }\n  _setCustomEventProgress() {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const s = this.attributes.scrollEventProgress;\n    if (!s) return;\n    const e = new CustomEvent(s, {\n      detail: {\n        target: this.$el,\n        progress: t\n      }\n    });\n    window.dispatchEvent(e);\n  }\n  _getProgressModularModules() {\n    if (!this.modularInstance) return;\n    const t = Object.keys(this.$el.dataset).filter(t => t.includes(\"module\")),\n      s = Object.entries(this.modularInstance.modules);\n    if (t.length) for (const e of t) {\n      const t = this.$el.dataset[e];\n      if (!t) return;\n      for (const e of s) {\n        const [s, i] = e;\n        t in i && this.progressModularModules.push({\n          moduleName: s,\n          moduleId: t\n        });\n      }\n    }\n  }\n  _getScrollCallFrom() {\n    const t = r([this.intersection.start, this.intersection.end], this.currentScroll);\n    return this.intersection.start === t ? \"start\" : \"end\";\n  }\n  _dispatchCall(t, s) {\n    var e, i;\n    const r = null == (e = this.attributes.scrollCall) ? void 0 : e.split(\",\"),\n      l = null == (i = this.attributes) ? void 0 : i.scrollCallSelf;\n    if (r && r.length > 1) {\n      var n;\n      const [e, i, o] = r;\n      let a;\n      a = l ? this.$el.dataset[\"module\".concat(i.trim())] : o, this.modularInstance && this.modularInstance.call(e.trim(), {\n        target: this.$el,\n        way: t,\n        from: s\n      }, i.trim(), null == (n = a) ? void 0 : n.trim());\n    } else if (r) {\n      const [e] = r,\n        i = new CustomEvent(e, {\n          detail: {\n            target: this.$el,\n            way: t,\n            from: s\n          }\n        });\n      window.dispatchEvent(i);\n    }\n  }\n}\nconst n = [\"scrollOffset\", \"scrollPosition\", \"scrollModuleProgress\", \"scrollCssProgress\", \"scrollEventProgress\", \"scrollSpeed\"];\nclass o {\n  constructor(_ref5) {\n    let {\n      $el: t,\n      modularInstance: s,\n      triggerRootMargin: e,\n      rafRootMargin: i,\n      scrollOrientation: r\n    } = _ref5;\n    this.$scrollContainer = void 0, this.modularInstance = void 0, this.triggerRootMargin = void 0, this.rafRootMargin = void 0, this.scrollElements = void 0, this.triggeredScrollElements = void 0, this.RAFScrollElements = void 0, this.scrollElementsToUpdate = void 0, this.IOTriggerInstance = void 0, this.IORafInstance = void 0, this.scrollOrientation = void 0, t ? (this.$scrollContainer = t, this.modularInstance = s, this.scrollOrientation = r, this.triggerRootMargin = null != e ? e : \"-1px -1px -1px -1px\", this.rafRootMargin = null != i ? i : \"100% 100% 100% 100%\", this.scrollElements = [], this.triggeredScrollElements = [], this.RAFScrollElements = [], this.scrollElementsToUpdate = [], this._init()) : console.error(\"Please provide a DOM Element as scrollContainer\");\n  }\n  _init() {\n    const t = this.$scrollContainer.querySelectorAll(\"[data-scroll]\"),\n      s = Array.from(t);\n    this._subscribeScrollElements(s), this.IOTriggerInstance = new e({\n      scrollElements: [...this.triggeredScrollElements],\n      rootMargin: this.triggerRootMargin,\n      IORaf: !1\n    }), this.IORafInstance = new e({\n      scrollElements: [...this.RAFScrollElements],\n      rootMargin: this.rafRootMargin,\n      IORaf: !0\n    });\n  }\n  destroy() {\n    this.IOTriggerInstance.destroy(), this.IORafInstance.destroy(), this._unsubscribeAllScrollElements();\n  }\n  onResize(_ref6) {\n    let {\n      currentScroll: t\n    } = _ref6;\n    for (const s of this.RAFScrollElements) s.onResize({\n      currentScroll: t\n    });\n  }\n  onRender(_ref7) {\n    let {\n      currentScroll: t,\n      smooth: s\n    } = _ref7;\n    for (const e of this.scrollElementsToUpdate) e.onRender({\n      currentScroll: t,\n      smooth: s\n    });\n  }\n  removeScrollElements(t) {\n    const s = t.querySelectorAll(\"[data-scroll]\");\n    if (s.length) {\n      for (let t = 0; t < this.triggeredScrollElements.length; t++) {\n        const e = this.triggeredScrollElements[t];\n        Array.from(s).indexOf(e.$el) > -1 && (this.IOTriggerInstance.unobserve(e.$el), this.triggeredScrollElements.splice(t, 1));\n      }\n      for (let t = 0; t < this.RAFScrollElements.length; t++) {\n        const e = this.RAFScrollElements[t];\n        Array.from(s).indexOf(e.$el) > -1 && (this.IORafInstance.unobserve(e.$el), this.RAFScrollElements.splice(t, 1));\n      }\n      s.forEach(t => {\n        const s = this.scrollElementsToUpdate.find(s => s.$el === t),\n          e = this.scrollElements.find(s => s.$el === t);\n        s && this._unsubscribeElementUpdate(s), e && (this.scrollElements = this.scrollElements.filter(t => t.id != e.id));\n      });\n    }\n  }\n  addScrollElements(t) {\n    const s = t.querySelectorAll(\"[data-scroll]\"),\n      e = [];\n    this.scrollElements.forEach(t => {\n      e.push(t.id);\n    });\n    const i = Math.max(...e) + 1,\n      r = Array.from(s);\n    this._subscribeScrollElements(r, i, !0);\n  }\n  _subscribeScrollElements(t) {\n    let s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;\n    for (let i = 0; i < t.length; i++) {\n      const r = t[i],\n        n = this._checkRafNeeded(r),\n        o = new l({\n          $el: r,\n          id: s + i,\n          scrollOrientation: this.scrollOrientation,\n          modularInstance: this.modularInstance,\n          subscribeElementUpdateFn: this._subscribeElementUpdate.bind(this),\n          unsubscribeElementUpdateFn: this._unsubscribeElementUpdate.bind(this),\n          needRaf: n\n        });\n      this.scrollElements.push(o), n ? (this.RAFScrollElements.push(o), e && (this.IORafInstance.scrollElements.push(o), this.IORafInstance.observe(o.$el))) : (this.triggeredScrollElements.push(o), e && (this.IOTriggerInstance.scrollElements.push(o), this.IOTriggerInstance.observe(o.$el)));\n    }\n  }\n  _unsubscribeAllScrollElements() {\n    this.scrollElements = [], this.RAFScrollElements = [], this.triggeredScrollElements = [], this.scrollElementsToUpdate = [];\n  }\n  _subscribeElementUpdate(t) {\n    this.scrollElementsToUpdate.push(t);\n  }\n  _unsubscribeElementUpdate(t) {\n    this.scrollElementsToUpdate = this.scrollElementsToUpdate.filter(s => s.id != t.id);\n  }\n  _checkRafNeeded(t) {\n    let s = [...n];\n    const e = t => {\n      s = s.filter(s => s != t);\n    };\n    if (t.dataset.scrollOffset) {\n      if (\"0,0\" != t.dataset.scrollOffset.split(\",\").map(t => t.replace(\"%\", \"\").trim()).join(\",\")) return !0;\n      e(\"scrollOffset\");\n    } else e(\"scrollOffset\");\n    if (t.dataset.scrollPosition) {\n      if (\"top,bottom\" != t.dataset.scrollPosition.trim()) return !0;\n      e(\"scrollPosition\");\n    } else e(\"scrollPosition\");\n    if (t.dataset.scrollSpeed && !isNaN(parseFloat(t.dataset.scrollSpeed))) return !0;\n    e(\"scrollSpeed\");\n    for (const e of s) if (e in t.dataset) return !0;\n    return !1;\n  }\n}\nclass a {\n  constructor(_ref8) {\n    let {\n      resizeElements: t,\n      resizeCallback: s = () => {}\n    } = _ref8;\n    this.$resizeElements = void 0, this.isFirstObserve = void 0, this.observer = void 0, this.resizeCallback = void 0, this.$resizeElements = t, this.resizeCallback = s, this.isFirstObserve = !0, this._init();\n  }\n  _init() {\n    this.observer = new ResizeObserver(t => {\n      var s;\n      !this.isFirstObserve && (null == (s = this.resizeCallback) || s.call(this)), this.isFirstObserve = !1;\n    });\n    for (const t of this.$resizeElements) this.observer.observe(t);\n  }\n  destroy() {\n    this.observer.disconnect();\n  }\n}\nconst c = {\n  wrapper: window,\n  content: document.documentElement,\n  wheelEventsTarget: window,\n  eventsTarget: window,\n  smoothWheel: !0,\n  syncTouch: !1,\n  syncTouchLerp: .075,\n  touchInertiaMultiplier: 35,\n  duration: .75,\n  easing: t => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\n  lerp: .1,\n  infinite: !1,\n  orientation: \"vertical\",\n  gestureOrientation: \"vertical\",\n  touchMultiplier: 1,\n  wheelMultiplier: 1,\n  autoResize: !0\n};\nclass h {\n  constructor() {\n    let {\n      lenisOptions: t = {},\n      modularInstance: e,\n      triggerRootMargin: i,\n      rafRootMargin: r,\n      autoResize: l = !0,\n      autoStart: n = !0,\n      scrollCallback: o = () => {},\n      initCustomTicker: a,\n      destroyCustomTicker: h\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.rafPlaying = void 0, this.lenisInstance = void 0, this.coreInstance = void 0, this.lenisOptions = void 0, this.modularInstance = void 0, this.triggerRootMargin = void 0, this.rafRootMargin = void 0, this.rafInstance = void 0, this.autoResize = void 0, this.autoStart = void 0, this.ROInstance = void 0, this.initCustomTicker = void 0, this.destroyCustomTicker = void 0, this._onRenderBind = void 0, this._onResizeBind = void 0, this._onScrollToBind = void 0, this.lenisOptions = s({}, c, t), Object.assign(this, {\n      lenisOptions: t,\n      modularInstance: e,\n      triggerRootMargin: i,\n      rafRootMargin: r,\n      autoResize: l,\n      autoStart: n,\n      scrollCallback: o,\n      initCustomTicker: a,\n      destroyCustomTicker: h\n    }), this._onRenderBind = this._onRender.bind(this), this._onScrollToBind = this._onScrollTo.bind(this), this._onResizeBind = this._onResize.bind(this), this.rafPlaying = !1, this._init();\n  }\n  _init() {\n    var s;\n    this.lenisInstance = new t({\n      wrapper: this.lenisOptions.wrapper,\n      content: this.lenisOptions.content,\n      eventsTarget: this.lenisOptions.eventsTarget,\n      lerp: this.lenisOptions.lerp,\n      duration: this.lenisOptions.duration,\n      orientation: this.lenisOptions.orientation,\n      gestureOrientation: this.lenisOptions.gestureOrientation,\n      smoothWheel: this.lenisOptions.smoothWheel,\n      syncTouch: this.lenisOptions.syncTouch,\n      syncTouchLerp: this.lenisOptions.syncTouchLerp,\n      touchInertiaMultiplier: this.lenisOptions.touchInertiaMultiplier,\n      wheelMultiplier: this.lenisOptions.wheelMultiplier,\n      touchMultiplier: this.lenisOptions.touchMultiplier,\n      easing: this.lenisOptions.easing\n    }), null == (s = this.lenisInstance) || s.on(\"scroll\", this.scrollCallback), document.documentElement.setAttribute(\"data-scroll-orientation\", this.lenisInstance.options.orientation), requestAnimationFrame(() => {\n      this.coreInstance = new o({\n        $el: this.lenisInstance.rootElement,\n        modularInstance: this.modularInstance,\n        triggerRootMargin: this.triggerRootMargin,\n        rafRootMargin: this.rafRootMargin,\n        scrollOrientation: this.lenisInstance.options.orientation\n      }), this._bindEvents(), this.initCustomTicker && !this.destroyCustomTicker ? console.warn(\"initCustomTicker callback is declared, but destroyCustomTicker is not. Please pay attention. It could cause trouble.\") : !this.initCustomTicker && this.destroyCustomTicker && console.warn(\"destroyCustomTicker callback is declared, but initCustomTicker is not. Please pay attention. It could cause trouble.\"), this.autoStart && this.start();\n    });\n  }\n  destroy() {\n    var t;\n    this.stop(), this._unbindEvents(), this.lenisInstance.destroy(), null == (t = this.coreInstance) || t.destroy(), requestAnimationFrame(() => {\n      var t;\n      null == (t = this.coreInstance) || t.destroy();\n    });\n  }\n  _bindEvents() {\n    this._bindScrollToEvents(), this.autoResize && (\"ResizeObserver\" in window ? this.ROInstance = new a({\n      resizeElements: [document.body],\n      resizeCallback: this._onResizeBind\n    }) : window.addEventListener(\"resize\", this._onResizeBind));\n  }\n  _unbindEvents() {\n    this._unbindScrollToEvents(), this.autoResize && (\"ResizeObserver\" in window ? this.ROInstance && this.ROInstance.destroy() : window.removeEventListener(\"resize\", this._onResizeBind));\n  }\n  _bindScrollToEvents(t) {\n    const s = t || this.lenisInstance.rootElement,\n      e = null == s ? void 0 : s.querySelectorAll(\"[data-scroll-to]\");\n    (null == e ? void 0 : e.length) && e.forEach(t => {\n      t.addEventListener(\"click\", this._onScrollToBind, !1);\n    });\n  }\n  _unbindScrollToEvents(t) {\n    const s = t || this.lenisInstance.rootElement,\n      e = null == s ? void 0 : s.querySelectorAll(\"[data-scroll-to]\");\n    (null == e ? void 0 : e.length) && e.forEach(t => {\n      t.removeEventListener(\"click\", this._onScrollToBind, !1);\n    });\n  }\n  _onResize() {\n    requestAnimationFrame(() => {\n      var t;\n      null == (t = this.coreInstance) || t.onResize({\n        currentScroll: this.lenisInstance.scroll\n      });\n    });\n  }\n  _onRender() {\n    var t, s;\n    null == (t = this.lenisInstance) || t.raf(Date.now()), null == (s = this.coreInstance) || s.onRender({\n      currentScroll: this.lenisInstance.scroll,\n      smooth: this.lenisInstance.isSmooth\n    });\n  }\n  _onScrollTo(t) {\n    var s;\n    t.preventDefault();\n    const e = null != (s = t.currentTarget) ? s : null;\n    if (!e) return;\n    const i = e.getAttribute(\"data-scroll-to-href\") || e.getAttribute(\"href\"),\n      r = e.getAttribute(\"data-scroll-to-offset\") || 0,\n      l = e.getAttribute(\"data-scroll-to-duration\") || this.lenisOptions.duration || c.duration;\n    i && this.scrollTo(i, {\n      offset: \"string\" == typeof r ? parseInt(r) : r,\n      duration: \"string\" == typeof l ? parseInt(l) : l\n    });\n  }\n  start() {\n    var t;\n    this.rafPlaying || (null == (t = this.lenisInstance) || t.start(), this.rafPlaying = !0, this.initCustomTicker ? this.initCustomTicker(this._onRenderBind) : this._raf());\n  }\n  stop() {\n    var t;\n    this.rafPlaying && (null == (t = this.lenisInstance) || t.stop(), this.rafPlaying = !1, this.destroyCustomTicker ? this.destroyCustomTicker(this._onRenderBind) : this.rafInstance && cancelAnimationFrame(this.rafInstance));\n  }\n  removeScrollElements(t) {\n    var s;\n    t ? (this._unbindScrollToEvents(t), null == (s = this.coreInstance) || s.removeScrollElements(t)) : console.error(\"Please provide a DOM Element as $oldContainer\");\n  }\n  addScrollElements(t) {\n    var s;\n    t ? (null == (s = this.coreInstance) || s.addScrollElements(t), requestAnimationFrame(() => {\n      this._bindScrollToEvents(t);\n    })) : console.error(\"Please provide a DOM Element as $newContainer\");\n  }\n  resize() {\n    this._onResizeBind();\n  }\n  scrollTo(t, s) {\n    var e;\n    null == (e = this.lenisInstance) || e.scrollTo(t, {\n      offset: null == s ? void 0 : s.offset,\n      lerp: null == s ? void 0 : s.lerp,\n      duration: null == s ? void 0 : s.duration,\n      immediate: null == s ? void 0 : s.immediate,\n      lock: null == s ? void 0 : s.lock,\n      force: null == s ? void 0 : s.force,\n      easing: null == s ? void 0 : s.easing,\n      onComplete: null == s ? void 0 : s.onComplete\n    });\n  }\n  _raf() {\n    this._onRenderBind(), this.rafInstance = requestAnimationFrame(() => this._raf());\n  }\n}\nexport { h as default };","map":{"version":3,"names":["e","constructor","_ref","scrollElements","t","rootMargin","s","IORaf","observer","_init","IntersectionObserver","forEach","find","$el","target","isIntersecting","isAlreadyIntersected","_setInview","_setOutOfView","observe","destroy","disconnect","unobserve","setInteractivityOn","setInview","setInteractivityOff","setOutOfView","attributes","scrollRepeat","i","r","reduce","Math","abs","l","_ref2","id","modularInstance","subscribeElementUpdateFn","unsubscribeElementUpdateFn","needRaf","scrollOrientation","n","o","a","c","h","d","intersection","metrics","currentScroll","translateValue","progress","lastProgress","progressModularModules","isInview","isInteractive","isInFold","isFirstResize","scrollClass","dataset","scrollOffset","scrollPosition","scrollModuleProgress","scrollCssProgress","scrollEventProgress","scrollSpeed","parseFloat","scrollCall","scrollCallSelf","scrollIgnoreFold","scrollEnableTouchSpeed","start","end","offsetStart","offsetEnd","bcr","window","scrollY","scrollX","_getProgressModularModules","_resize","onResize","_ref3","onRender","_ref4","smooth","innerHeight","innerWidth","_computeProgress","isNaN","max","style","transform","concat","classList","add","_getScrollCallFrom","_dispatchCall","remove","getBoundingClientRect","_computeMetrics","_computeIntersection","top","left","height","width","split","trim","includes","parseInt","replace","_setCssProgress","_setCustomEventProgress","call","moduleName","moduleId","arguments","length","undefined","setProperty","toString","CustomEvent","detail","dispatchEvent","Object","keys","filter","entries","modules","push","way","from","_ref5","triggerRootMargin","rafRootMargin","$scrollContainer","triggeredScrollElements","RAFScrollElements","scrollElementsToUpdate","IOTriggerInstance","IORafInstance","console","error","querySelectorAll","Array","_subscribeScrollElements","_unsubscribeAllScrollElements","_ref6","_ref7","removeScrollElements","indexOf","splice","_unsubscribeElementUpdate","addScrollElements","_checkRafNeeded","_subscribeElementUpdate","bind","map","join","_ref8","resizeElements","resizeCallback","$resizeElements","isFirstObserve","ResizeObserver","wrapper","content","document","documentElement","wheelEventsTarget","eventsTarget","smoothWheel","syncTouch","syncTouchLerp","touchInertiaMultiplier","duration","easing","min","pow","lerp","infinite","orientation","gestureOrientation","touchMultiplier","wheelMultiplier","autoResize","lenisOptions","autoStart","scrollCallback","initCustomTicker","destroyCustomTicker","rafPlaying","lenisInstance","coreInstance","rafInstance","ROInstance","_onRenderBind","_onResizeBind","_onScrollToBind","assign","_onRender","_onScrollTo","_onResize","on","setAttribute","options","requestAnimationFrame","rootElement","_bindEvents","warn","stop","_unbindEvents","_bindScrollToEvents","body","addEventListener","_unbindScrollToEvents","removeEventListener","scroll","raf","Date","now","isSmooth","preventDefault","currentTarget","getAttribute","scrollTo","offset","_raf","cancelAnimationFrame","resize","immediate","lock","force","onComplete","default"],"sources":["C:\\Users\\hp\\node_modules\\locomotive-scroll\\src\\core\\IO.ts","C:\\Users\\hp\\node_modules\\locomotive-scroll\\src\\utils\\maths.ts","C:\\Users\\hp\\node_modules\\locomotive-scroll\\src\\core\\ScrollElement.ts","C:\\Users\\hp\\node_modules\\locomotive-scroll\\src\\core\\Core.ts","C:\\Users\\hp\\node_modules\\locomotive-scroll\\src\\core\\RO.ts","C:\\Users\\hp\\node_modules\\locomotive-scroll\\src\\index.ts"],"sourcesContent":["/**\n * Intersection Observer\n *\n * Detecting visibility of an element in the viewport.\n *\n * Features functions to:\n *\n * - Trigger inview/outOfView callbacks\n * - If the element has a requestAnimationFrame dependency, set interactivy status for the ScrollElement Class\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API}\n */\n\nimport { IIOOptions } from '../types';\nimport ScrollElement from './ScrollElement';\n\nexport default class IO {\n    public scrollElements: ScrollElement[];\n    private rootMargin: string;\n    private IORaf: boolean;\n    private observer!: IntersectionObserver;\n\n    constructor({\n        scrollElements,\n        rootMargin = '-1px -1px -1px -1px',\n        IORaf,\n    }: IIOOptions) {\n        // Parameters\n        this.scrollElements = scrollElements;\n        this.rootMargin = rootMargin;\n        this.IORaf = IORaf;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Intersection Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Options\n        const observerOptions = {\n            rootMargin: this.rootMargin,\n        };\n\n        // Callback\n        const onIntersect = (entries: IntersectionObserverEntry[]) => {\n            entries.forEach((entry) => {\n                const $targetItem: ScrollElement | undefined =\n                    this.scrollElements.find(\n                        (item) => item.$el === entry.target\n                    );\n\n                if (entry.isIntersecting) {\n                    $targetItem && ($targetItem.isAlreadyIntersected = true);\n                    this._setInview(entry);\n                } else if ($targetItem && $targetItem.isAlreadyIntersected) {\n                    this._setOutOfView(entry);\n                }\n            });\n        };\n\n        // Instance\n        this.observer = new IntersectionObserver(onIntersect, observerOptions);\n\n        // Observe each default elements\n        for (const scrollElement of this.scrollElements) {\n            const $scrollElement = scrollElement.$el;\n            this.observe($scrollElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Intersection Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n\n    /**\n     * Subscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to observe.\n     */\n    public observe($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.observe($scrollElement);\n    }\n\n    /**\n     * Unsubscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to unobserve.\n     */\n    public unobserve($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.unobserve($scrollElement);\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger inview callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setInview(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOn();\n        !this.IORaf && scrollElement?.setInview();\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger out of view callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setOutOfView(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOff();\n        !this.IORaf && scrollElement?.setOutOfView();\n\n        // Unobserve if element doesn't have repeat attribute\n        if (!scrollElement?.attributes.scrollRepeat && !this.IORaf) {\n            this.unobserve(entry.target as HTMLElement);\n        }\n    }\n}\n","// https://greensock.com/docs/v3/GSAP/gsap.utils\n\n/**\n * Clamp a value to fit within a specific range (ex: clamp(0, 100, -12) --> 0).\n *\n * @param {number} min   - Minimum value expected.\n * @param {number} max   - Maximum value expected.\n * @param {number} value - Current value.\n *\n * @returns {number} - Clamped value.\n */\nexport function clamp(min: number, max: number, value: number): number {\n    return value < min ? min : value > max ? max : value;\n}\n\n/**\n * Map one range to another (ex: mapRange(-10, 10, 0, 100, 5) --> 75).\n *\n * @param {number} inMin  - Current minimum value.\n * @param {number} inMax  - Current maximum value.\n * @param {number} outMin - Maximum value expected.\n * @param {number} outMax - Maximum value expected.\n * @param {number} value  - Current value.\n *\n * @returns {number} - New value that should be between minimum value expected and maximum value.\n */\nexport function mapRange(\n    inMin: number,\n    inMax: number,\n    outMin: number,\n    outMax: number,\n    value: number\n): number {\n    const inRange = inMax - inMin;\n    const outRange = outMax - outMin;\n    return outMin + (((value - inMin) / inRange) * outRange || 0);\n}\n\n/**\n * Map a number within a range to a progress between 0 to 1 (ex: normalize(100, 200, 150) --> 0.5).\n *\n * @param {number} min   - Current minimum value.\n * @param {number} max   - Current maximum value.\n * @param {number} value - Current value.\n *\n * @returns {number} - New value that should be between 0 and 1.\n */\nexport function normalize(min: number, max: number, value: number): number {\n    return mapRange(min, max, 0, 1, value);\n}\n\n/**\n * Get closest number from an array.\n *\n * @param {number[]} array  - Numbers array.\n * @param {number}   target - Reference value.\n *\n * @returns {number} - Closest number.\n */\nexport function closestNumber(array: number[], target: number): number {\n    return array.reduce((prev, curr) => {\n        return Math.abs(curr - target) < Math.abs(prev - target) ? curr : prev;\n    });\n}\n","/**\n * Scroll Element\n *\n * Give tools to compute element progress in the viewport and triggers callbacks to animate it.\n *\n * Features functions to:\n *\n * - scrollClass - Add a custom class when the element is intersected by the offset\n * - scrollOffset - Determine offsets to intersect the element\n * - scrollPosition - Determine the element positions to consider an element as intersected.\n * - scrollModuleProgress - Send scroll progress to modular module that have a specific method (PROGRESS_MODULAR_METHOD)\n * - scrollCssProgress - Add a specific css variable (PROGRESS_CSS_VAR) that store the scroll progress\n * - scrollEventProgress - Send scroll progress to custom event listeners.\n * - scrollSpeed - Add a scroll multiplicator to create a parallax effect\n * - scrollRepeat - Repeat the option to trigger animation each time the element is intersected\n * - scrollCall - Call a custom event or a modular callback when the element is intersected\n */\n\nimport {\n    IModular,\n    IScrollElementOptions,\n    IScrollElementAttributes,\n    IScrollElementIntersection,\n    IScrollElementMetrics,\n    IProgressModularModules,\n    IScrollElementCallbacksValues,\n    scrollCallWay,\n    scrollCallFrom,\n    scrollOrientation,\n} from '../types';\nimport { clamp, closestNumber, normalize, mapRange } from '../utils/maths';\n\n/** Constants */\nconst INVIEW_CLASS = 'is-inview';\nconst PROGRESS_CSS_VAR = '--progress';\nconst PROGRESS_MODULAR_METHOD = 'onScrollProgress';\n\nexport default class ScrollElement {\n    public $el: HTMLElement;\n    public id: number;\n    public needRaf: boolean;\n    public attributes: IScrollElementAttributes;\n    public scrollOrientation: scrollOrientation;\n    public isAlreadyIntersected: boolean;\n\n    private intersection: IScrollElementIntersection;\n    private metrics: IScrollElementMetrics;\n    private currentScroll: number;\n    private translateValue: number;\n    private progress: number;\n    private lastProgress: number | null;\n    private modularInstance?: IModular;\n    private progressModularModules: IProgressModularModules[];\n    private isInview: boolean;\n    private isInteractive: boolean;\n    private isInFold: boolean;\n    private isFirstResize: boolean;\n\n    private subscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n    private unsubscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n\n    constructor({\n        $el,\n        id,\n        modularInstance,\n        subscribeElementUpdateFn,\n        unsubscribeElementUpdateFn,\n        needRaf,\n        scrollOrientation,\n    }: IScrollElementOptions) {\n        // Scroll DOM element\n        this.$el = $el;\n        // Unique ID\n        this.id = id;\n        // RAF option\n        this.needRaf = needRaf;\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n        // Modular.js\n        this.modularInstance = modularInstance;\n        // Parent's callbacks\n        this.subscribeElementUpdateFn = subscribeElementUpdateFn;\n        this.unsubscribeElementUpdateFn = unsubscribeElementUpdateFn;\n\n        // Attributes\n        this.attributes = {\n            scrollClass: this.$el.dataset['scrollClass'] ?? INVIEW_CLASS,\n            scrollOffset: this.$el.dataset['scrollOffset'] ?? '0,0',\n            scrollPosition: this.$el.dataset['scrollPosition'] ?? 'start,end',\n            scrollModuleProgress:\n                this.$el.dataset['scrollModuleProgress'] != null,\n            scrollCssProgress: this.$el.dataset['scrollCssProgress'] != null,\n            scrollEventProgress:\n                this.$el.dataset['scrollEventProgress'] ?? null,\n            scrollSpeed:\n                this.$el.dataset['scrollSpeed'] != null\n                    ? parseFloat(this.$el.dataset['scrollSpeed'])\n                    : null,\n            scrollRepeat: this.$el.dataset['scrollRepeat'] != null,\n            scrollCall: this.$el.dataset['scrollCall'] ?? null,\n            scrollCallSelf: this.$el.dataset['scrollCallSelf'] != null,\n            scrollIgnoreFold: this.$el.dataset['scrollIgnoreFold'] != null,\n            scrollEnableTouchSpeed:\n                this.$el.dataset['scrollEnableTouchSpeed'] != null,\n        };\n\n        // Limits\n        this.intersection = {\n            start: 0,\n            end: 0,\n        };\n\n        // Metrics\n        this.metrics = {\n            offsetStart: 0,\n            offsetEnd: 0,\n            bcr: {} as DOMRect,\n        };\n\n        // Scroll Values\n        this.currentScroll =\n            this.scrollOrientation === 'vertical'\n                ? window.scrollY\n                : window.scrollX;\n\n        // Parallax\n        this.translateValue = 0;\n\n        // Progress\n        this.progress = 0;\n        this.lastProgress = null;\n        this.progressModularModules = [];\n\n        // Inview\n        this.isInview = false;\n        this.isInteractive = false;\n        this.isAlreadyIntersected = false;\n        this.isInFold = false;\n        this.isFirstResize = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize progress tracking.\n     *\n     * @private\n     */\n    private _init() {\n        if (!this.needRaf) {\n            return;\n        }\n\n        // Prepare modules progress\n        if (this.modularInstance && this.attributes.scrollModuleProgress) {\n            this._getProgressModularModules();\n        }\n\n        // First resize to compute all values\n        this._resize();\n    }\n\n    /**\n     * Callback - Resize callback\n     */\n    public onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        this.currentScroll = currentScroll;\n        this._resize();\n    }\n\n    /**\n     * Callback - RAF callback\n     */\n    public onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        this.currentScroll = currentScroll;\n        this._computeProgress();\n\n        // Parallax\n        if (\n            this.attributes.scrollSpeed &&\n            !isNaN(this.attributes.scrollSpeed)\n        ) {\n            // if touch detected or smooth disabled\n            if (!this.attributes.scrollEnableTouchSpeed && !smooth) {\n                if (this.translateValue) {\n                    this.$el.style.transform = `translate3d(0, 0, 0)`;\n                }\n                this.translateValue = 0;\n\n                // if mousewheel or smooth enabled\n            } else {\n                // Check fold condition\n                if (this.isInFold) {\n                    const progress = Math.max(0, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                } else {\n                    const progress = mapRange(0, 1, -1, 1, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                }\n\n                this.$el.style.transform =\n                    this.scrollOrientation === 'vertical'\n                        ? `translate3d(0, ${this.translateValue}px, 0)`\n                        : `translate3d(${this.translateValue}px, 0, 0)`;\n            }\n        }\n    }\n\n    /**\n     * Inview callback\n     */\n    public setInview() {\n        if (this.isInview) {\n            return;\n        }\n\n        this.isInview = true;\n        this.$el.classList.add(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'enter';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Out of view callback\n     */\n    public setOutOfView() {\n        if (!(this.isInview && this.attributes.scrollRepeat)) {\n            return;\n        }\n\n        this.isInview = false;\n        this.$el.classList.remove(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'leave';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Switch interactivity on to subscribe the instance to the RAF\n     * and start calculations.\n     */\n    public setInteractivityOn() {\n        if (this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = true;\n        this.subscribeElementUpdateFn(this);\n    }\n\n    /**\n     * Switch interactivity off to unsubscribe the instance to the RAF\n     * and stop calculations.\n     */\n    public setInteractivityOff() {\n        if (!this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = false;\n        this.unsubscribeElementUpdateFn(this);\n\n        // Force progress to progress limit when the element is out\n        this.lastProgress != null &&\n            this._computeProgress(closestNumber([0, 1], this.lastProgress));\n    }\n\n    /**\n     * Resize method that compute the element's values.\n     *\n     * @private\n     */\n    private _resize() {\n        this.metrics.bcr = this.$el.getBoundingClientRect();\n        this._computeMetrics();\n        this._computeIntersection();\n\n        // First resize logic\n        if (this.isFirstResize) {\n            this.isFirstResize = false;\n            // Dispatch default call if the element is in fold.\n            if (this.isInFold) {\n                this.setInview();\n            }\n        }\n    }\n\n    /**\n     * Compute element's offsets and determine if the element is in fold.\n     *\n     * @private\n     */\n    private _computeMetrics() {\n        const { top, left, height, width } = this.metrics.bcr;\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        const metricsStart = this.scrollOrientation === 'vertical' ? top : left;\n        const metricsSize =\n            this.scrollOrientation === 'vertical' ? height : width;\n\n        this.metrics.offsetStart =\n            this.currentScroll + metricsStart - this.translateValue;\n        this.metrics.offsetEnd = this.metrics.offsetStart + metricsSize;\n\n        if (\n            this.metrics.offsetStart < wSize &&\n            !this.attributes.scrollIgnoreFold\n        ) {\n            this.isInFold = true;\n        } else {\n            this.isInFold = false;\n        }\n    }\n\n    /**\n     * Compute intersection values depending on the context.\n     *\n     * @private\n     */\n    private _computeIntersection() {\n        // Window size\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n\n        // Metrics size\n        const metricsSize =\n            this.scrollOrientation === 'vertical'\n                ? this.metrics.bcr.height\n                : this.metrics.bcr.width;\n\n        // Offset\n        const offset = this.attributes.scrollOffset.split(',');\n        const offsetStart = offset[0] != undefined ? offset[0].trim() : '0';\n        const offsetEnd = offset[1] != undefined ? offset[1].trim() : '0';\n\n        // Positions\n        const scrollPosition = this.attributes.scrollPosition.split(',');\n        let scrollPositionStart =\n            scrollPosition[0] != undefined ? scrollPosition[0].trim() : 'start';\n        const scrollPositionEnd =\n            scrollPosition[1] != undefined ? scrollPosition[1].trim() : 'end';\n\n        // Viewport\n        const viewportStart = offsetStart.includes('%')\n            ? wSize * parseInt(offsetStart.replace('%', '').trim()) * 0.01\n            : parseInt(offsetStart);\n        const viewportEnd = offsetEnd.includes('%')\n            ? wSize * parseInt(offsetEnd.replace('%', '').trim()) * 0.01\n            : parseInt(offsetEnd);\n\n        // Fold exception\n        if (this.isInFold) {\n            scrollPositionStart = 'fold';\n        }\n\n        // Define Intersection Start\n        switch (scrollPositionStart) {\n            case 'start':\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n\n            case 'middle':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize;\n                break;\n\n            case 'fold':\n                this.intersection.start = 0;\n                break;\n\n            default:\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n        }\n\n        // Define Intersection End\n        switch (scrollPositionEnd) {\n            case 'start':\n                this.intersection.end = this.metrics.offsetStart - viewportEnd;\n                break;\n\n            case 'middle':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n\n            default:\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n        }\n\n        // Avoid to have the end < the start intersection >\n        if (this.intersection.end <= this.intersection.start) {\n            switch (scrollPositionEnd) {\n                case 'start':\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n\n                case 'middle':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize * 0.5;\n                    break;\n\n                case 'end':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize;\n                    break;\n\n                default:\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Compute the scroll progress of the element depending\n     * on its intersection values.\n     *\n     * @private\n     *\n     * @param {number} [forcedProgress] - Value to force progress.\n     */\n    private _computeProgress(forcedProgress?: number) {\n        // Progress\n        const progress =\n            forcedProgress ??\n            clamp(\n                0,\n                1,\n                normalize(\n                    this.intersection.start,\n                    this.intersection.end,\n                    this.currentScroll\n                )\n            );\n\n        this.progress = progress;\n\n        if (progress != this.lastProgress) {\n            this.lastProgress = progress;\n\n            // Set the element's progress to the css variable\n            this.attributes.scrollCssProgress && this._setCssProgress(progress);\n\n            // Set the element's progress to the custom event listeners\n            this.attributes.scrollEventProgress &&\n                this._setCustomEventProgress(progress);\n\n            // Set the element's progress to inline modules\n            if (this.attributes.scrollModuleProgress) {\n                for (const modularModules of this.progressModularModules) {\n                    this.modularInstance &&\n                        this.modularInstance.call(\n                            PROGRESS_MODULAR_METHOD,\n                            progress,\n                            modularModules.moduleName,\n                            modularModules.moduleId\n                        );\n                }\n            }\n\n            // Logic to trigger the inview/out of view callbacks\n            progress > 0 && progress < 1 && this.setInview();\n            progress === 0 && this.setOutOfView();\n            progress === 1 && this.setOutOfView();\n        }\n    }\n\n    /**\n     * Set the element's progress to a specific css variable.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCssProgress(currentProgress = 0) {\n        this.$el.style.setProperty(\n            PROGRESS_CSS_VAR,\n            currentProgress.toString()\n        );\n    }\n\n    /**\n     * Set the element's progress to the custom event listeners.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCustomEventProgress(currentProgress = 0) {\n        const customEventName = this.attributes.scrollEventProgress;\n\n        if (!customEventName) return;\n\n        const customEvent = new CustomEvent(customEventName, {\n            detail: {\n                target: this.$el,\n                progress: currentProgress,\n            },\n        });\n        window.dispatchEvent(customEvent);\n    }\n\n    /**\n     * Get modular modules that can listen the element's progress.\n     *\n     * @private\n     */\n    _getProgressModularModules() {\n        if (!this.modularInstance) {\n            return;\n        }\n\n        const modulesIdNames = Object.keys(this.$el.dataset).filter((key) =>\n            key.includes('module')\n        );\n        const modules: any[] = Object.entries(this.modularInstance.modules);\n\n        if (!modulesIdNames.length) {\n            return;\n        }\n\n        for (const modulesIdName of modulesIdNames) {\n            const moduleId = this.$el.dataset[modulesIdName];\n\n            if (!moduleId) {\n                return;\n            }\n\n            for (const module of modules) {\n                const [moduleName, moduleObj] = module;\n\n                if (moduleId in moduleObj) {\n                    this.progressModularModules.push({\n                        moduleName,\n                        moduleId,\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Function to get scroll call from.\n     *\n     * @private\n     */\n    _getScrollCallFrom(): scrollCallFrom {\n        const closestIntersectionValue = closestNumber(\n            [this.intersection.start, this.intersection.end],\n            this.currentScroll\n        );\n        return this.intersection.start === closestIntersectionValue\n            ? 'start'\n            : 'end';\n    }\n\n    /**\n     * Function to dispatch a custom event or call a modular callback.\n     *\n     * @private\n     *\n     * @param {scrollCallWay} way - Enter or leave.\n     * @param {scrollCallFrom} from - Start or end.\n     */\n    _dispatchCall(way: scrollCallWay, from: scrollCallFrom) {\n        const callParameters = this.attributes.scrollCall?.split(',');\n        const callSelf = this.attributes?.scrollCallSelf;\n\n        if (callParameters && callParameters.length > 1) {\n            // Using Modular.js (https://github.com/modularorg/modularjs)\n            const [func, moduleName, moduleId] = callParameters;\n            let targetModuleId;\n\n            // If the module is set on the scroll element\n            if (callSelf) {\n                targetModuleId = this.$el.dataset[`module${moduleName.trim()}`];\n            } else {\n                targetModuleId = moduleId;\n            }\n\n            this.modularInstance &&\n                this.modularInstance.call(\n                    func.trim(),\n                    {\n                        target: this.$el,\n                        way,\n                        from,\n                    },\n                    moduleName.trim(),\n                    targetModuleId?.trim()\n                );\n        } else if (callParameters) {\n            // Using CustomEvent API (https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)\n            const [customEventName] = callParameters;\n            const customEvent = new CustomEvent(customEventName, {\n                detail: {\n                    target: this.$el,\n                    way,\n                    from,\n                },\n            });\n            window.dispatchEvent(customEvent);\n        }\n    }\n}\n","/**\n * Integrates Lenis with Locomotive's built-in animation system\n */\n\nimport {\n    CoreOptions,\n    IModular,\n    IScrollElementCallbacksValues,\n    scrollOrientation,\n} from '../types';\nimport IO from './IO';\nimport ScrollElement from './ScrollElement';\n\n/** Defined attributes that need a requestAnimationFrame */\nconst ATTRIBUTES_THAT_NEED_RAF = [\n    'scrollOffset',\n    'scrollPosition',\n    'scrollModuleProgress',\n    'scrollCssProgress',\n    'scrollEventProgress',\n    'scrollSpeed',\n];\n\n/** Default root margins */\nconst TRIGGER_ROOT_MARGIN = '-1px -1px -1px -1px';\nconst RAF_ROOT_MARGIN = '100% 100% 100% 100%'; // Add 100vh top/bottom && 100vw left/right to use a biggest value with data-scroll-speed\n\nexport default class Core {\n    private $scrollContainer!: HTMLElement;\n    private modularInstance?: IModular;\n    private triggerRootMargin!: string;\n    private rafRootMargin!: string;\n    private scrollElements!: ScrollElement[];\n    private triggeredScrollElements!: ScrollElement[];\n    private RAFScrollElements!: ScrollElement[];\n    private scrollElementsToUpdate!: ScrollElement[];\n    private IOTriggerInstance!: IO;\n    private IORafInstance!: IO;\n    private scrollOrientation!: scrollOrientation;\n\n    constructor({\n        $el,\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        scrollOrientation,\n    }: CoreOptions) {\n        if (!$el) {\n            console.error('Please provide a DOM Element as scrollContainer');\n            return;\n        }\n\n        // Scroll container\n        this.$scrollContainer = $el;\n\n        // Modular.js\n        this.modularInstance = modularInstance;\n\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n\n        // IO Margins\n        this.triggerRootMargin = triggerRootMargin ?? TRIGGER_ROOT_MARGIN;\n        this.rafRootMargin = rafRootMargin ?? RAF_ROOT_MARGIN;\n\n        // ScrollElements arrays\n        this.scrollElements = [];\n        this.triggeredScrollElements = [];\n        this.RAFScrollElements = [];\n        this.scrollElementsToUpdate = [];\n\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize the core.\n     *\n     * @private\n     */\n    private _init() {\n        const $scrollElements =\n            this.$scrollContainer.querySelectorAll('[data-scroll]');\n\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements($scrollElementsArr);\n\n        // Trigger IO\n        this.IOTriggerInstance = new IO({\n            scrollElements: [...this.triggeredScrollElements],\n            rootMargin: this.triggerRootMargin,\n            IORaf: false,\n        });\n\n        // Raf IO\n        this.IORafInstance = new IO({\n            scrollElements: [...this.RAFScrollElements],\n            rootMargin: this.rafRootMargin,\n            IORaf: true,\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy core.\n     */\n    public destroy() {\n        this.IOTriggerInstance.destroy();\n        this.IORafInstance.destroy();\n        this._unsubscribeAllScrollElements();\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.RAFScrollElements) {\n            scrollElement.onResize({\n                currentScroll,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Callback - RAF callback.\n     */\n    onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.scrollElementsToUpdate) {\n            scrollElement.onRender({\n                currentScroll,\n                smooth,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Remove items from lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $oldContainer - HTMLElement that contains data-scroll elements to unsubscribe\n     */\n    removeScrollElements($oldContainer: HTMLElement) {\n        const $scrollElementsToRemove =\n            $oldContainer.querySelectorAll('[data-scroll]');\n\n        if (!$scrollElementsToRemove.length) return;\n\n        // 1. Remove from IO\n        for (let index = 0; index < this.triggeredScrollElements.length; index++) {\n            const scrollElement = this.triggeredScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IOTriggerInstance.unobserve(scrollElement.$el);\n                this.triggeredScrollElements.splice(index, 1);\n            }\n        }\n\n        for (let index = 0; index < this.RAFScrollElements.length; index++) {\n            const scrollElement = this.RAFScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IORafInstance.unobserve(scrollElement.$el);\n                this.RAFScrollElements.splice(index, 1);\n            }\n        }\n\n        // 2. Remove from scrollElementsToUpdate[] and scrollElements[]\n        $scrollElementsToRemove.forEach(($scrollElement) => {\n            const targetScrollElementToUpdate =\n                this.scrollElementsToUpdate.find(\n                    (scrollElement) => scrollElement.$el === $scrollElement\n                );\n            const targetScrollElement = this.scrollElements.find(\n                (scrollElement) => scrollElement.$el === $scrollElement\n            );\n\n            if (targetScrollElementToUpdate) {\n                this._unsubscribeElementUpdate(targetScrollElementToUpdate);\n            }\n            if (targetScrollElement) {\n                this.scrollElements = this.scrollElements.filter(\n                    (scrollElementItem) =>\n                        scrollElementItem.id != targetScrollElement.id\n                );\n            }\n        });\n    }\n\n    /**\n     * Add items to lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $newContainer - HTMLElement that contains data-scroll elements to subscribe\n     */\n    addScrollElements($newContainer: HTMLElement) {\n        // 3. Rebuild ScrollElements\n        const $scrollElements = $newContainer.querySelectorAll('[data-scroll]');\n\n        // 4. Get max scrollElement.id\n        const ids: number[] = [];\n        this.scrollElements.forEach((scrollElement) => {\n            ids.push(scrollElement.id);\n        });\n        const maxID = Math.max(...ids);\n        const fromIndex = maxID + 1;\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements(\n            $scrollElementsArr,\n            fromIndex,\n            true\n        );\n    }\n\n    /**\n     * Create a ScrollElement instance for each elements with\n     * `data-scroll` attribute.\n     *\n     * @private\n     *\n     * @param {HTMLElement[]} $scrollElements - List of elements that need\n     *     to be regarded.\n     */\n    _subscribeScrollElements(\n        $scrollElements: HTMLElement[],\n        fromIndex = 0,\n        toObserve = false\n    ) {\n        // For each scroll element create a ScrollElement instance\n        for (let index = 0; index < $scrollElements.length; index++) {\n            const $scrollElement = $scrollElements[index];\n            const needRaf = this._checkRafNeeded($scrollElement);\n\n            const scrollElementInstance = new ScrollElement({\n                $el: $scrollElement,\n                id: fromIndex + index,\n                scrollOrientation: this.scrollOrientation,\n                modularInstance: this.modularInstance,\n                subscribeElementUpdateFn:\n                    this._subscribeElementUpdate.bind(this),\n                unsubscribeElementUpdateFn:\n                    this._unsubscribeElementUpdate.bind(this),\n                needRaf,\n            });\n\n            // Push to common array\n            this.scrollElements.push(scrollElementInstance);\n\n            // Push to specific array\n            if (needRaf) {\n                this.RAFScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IORafInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IORafInstance.observe(scrollElementInstance.$el);\n                }\n            } else {\n                this.triggeredScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IOTriggerInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IOTriggerInstance.observe(scrollElementInstance.$el);\n                }\n            }\n        }\n    }\n\n    /**\n     * Clear all ScrollElement arrays.\n     *\n     * @private\n     */\n    _unsubscribeAllScrollElements() {\n        this.scrollElements = [];\n        this.RAFScrollElements = [];\n        this.triggeredScrollElements = [];\n        this.scrollElementsToUpdate = [];\n    }\n\n    /**\n     * Subscribe ScrollElement instance that needs to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - ScrollElement instance inview\n     *     that needs to be updated.\n     */\n    _subscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate.push(scrollElement);\n    }\n\n    /**\n     * Unscribe ScrollElement instance that doesn't need to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - The updated ScrollElement instance\n     *     out of view now.\n     */\n    _unsubscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate = this.scrollElementsToUpdate.filter(\n            (scrollElementToUpdate) =>\n                scrollElementToUpdate.id != scrollElement.id\n        );\n    }\n\n    /**\n     * Check if a DOM Element need a requestAnimationFrame to be used.\n     *\n     * @private\n     *\n     * @param {HTMLElement} $scrollElement - The element that needs to be checked.\n     *\n     * @returns {boolean}\n     */\n    _checkRafNeeded($scrollElement: HTMLElement) {\n        let attributesThatNeedRaf = [...ATTRIBUTES_THAT_NEED_RAF];\n\n        // Remove utils\n        const removeAttribute = (attributeToRemove: string) => {\n            attributesThatNeedRaf = attributesThatNeedRaf.filter(\n                (attribute) => attribute != attributeToRemove\n            );\n        };\n\n        // 1. Check scroll offset values\n        if ($scrollElement.dataset.scrollOffset) {\n            const value = $scrollElement.dataset.scrollOffset\n                .split(',')\n                .map((test) => test.replace('%', '').trim())\n                .join(',');\n            if (value != '0,0') {\n                return true;\n            } else {\n                removeAttribute('scrollOffset');\n            }\n        } else {\n            removeAttribute('scrollOffset');\n        }\n\n        // 2. Check scroll position values\n        if ($scrollElement.dataset.scrollPosition) {\n            const value = $scrollElement.dataset.scrollPosition.trim();\n            if (value != 'top,bottom') {\n                return true;\n            } else {\n                removeAttribute('scrollPosition');\n            }\n        } else {\n            removeAttribute('scrollPosition');\n        }\n\n        // 3. Check scroll speed values\n        if (\n            $scrollElement.dataset.scrollSpeed &&\n            !isNaN(parseFloat($scrollElement.dataset.scrollSpeed))\n        ) {\n            return true;\n        } else {\n            removeAttribute('scrollSpeed');\n        }\n\n        // 4. Check others attributes\n        for (const attribute of attributesThatNeedRaf) {\n            if (attribute in $scrollElement.dataset) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n","/**\n * Resize Observer\n *\n * The Resize Observer API provides a performant mechanism by which code can monitor an element for changes to its size,\n * with notifications being delivered to the observer each time the size changes.\n *\n * Features functions to:\n *\n * - Trigger the resize callback if the specified element's size change.\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API}\n */\n\nimport { IROOptions } from '../types';\n\nexport default class RO {\n    private $resizeElements: HTMLElement[];\n    private isFirstObserve: boolean;\n    private observer!: ResizeObserver;\n    private resizeCallback: () => void;\n\n    constructor({ resizeElements, resizeCallback = () => {} }: IROOptions) {\n        // Parameters\n        this.$resizeElements = resizeElements;\n        this.resizeCallback = resizeCallback;\n\n        // Flags\n        this.isFirstObserve = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Resize Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Callback\n        const onResize = (entries: ResizeObserverEntry[]) => {\n            !this.isFirstObserve && this.resizeCallback?.();\n            this.isFirstObserve = false;\n        };\n\n        // Instance\n        this.observer = new ResizeObserver(onResize);\n\n        // Observe each default elements\n        for (const $resizeElement of this.$resizeElements) {\n            this.observer.observe($resizeElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Resize Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n}\n","//@ts-ignore\nimport Lenis from 'lenis';\nimport Core from './core/Core';\nimport RO from './core/RO';\nimport {\n    ILenisScrollToOptions,\n    ILenisScrollValues,\n    ILocomotiveScrollOptions,\n    IModular,\n    lenisTargetScrollTo,\n} from './types';\nimport type { LenisOptions } from 'lenis';\n\n/**\n * @type {LenisOptions}\n */\nconst defaultLenisOptions: LenisOptions = {\n    wrapper: window,\n    content: document.documentElement,\n    wheelEventsTarget: window,\n    eventsTarget: window,\n    smoothWheel: true,\n    syncTouch: false,\n    syncTouchLerp: 0.075,\n    touchInertiaMultiplier: 35,\n    duration: 0.75,\n    easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)), // https://www.desmos.com/calculator/brs54l4xou\n    lerp: 0.1,\n    infinite: false,\n    orientation: 'vertical',\n    gestureOrientation: 'vertical',\n    touchMultiplier: 1,\n    wheelMultiplier: 1,\n    autoResize: true\n};\n\n/**\n * Locomotive Scroll\n *\n * Detection of elements in viewport & smooth scrolling with parallax.\n *\n * Inspired by\n * {@link https://github.com/locomotivemtl/locomotive-scroll locomotive-scroll.js}\n * and built around\n * {@link https://github.com/darkroomengineering/lenis lenis.js}.\n */\n\nexport default class LocomotiveScroll {\n    public rafPlaying: boolean;\n\n    private lenisInstance: any;\n    private coreInstance: any;\n\n    private lenisOptions: LenisOptions;\n    private modularInstance?: IModular;\n    private triggerRootMargin?: string;\n    private rafRootMargin?: string;\n    private rafInstance?: any;\n    private autoResize?: boolean;\n    private autoStart?: boolean;\n    private ROInstance?: RO;\n    private scrollCallback?(scrollValues: ILenisScrollValues): void;\n    private initCustomTicker?: (render: () => void) => void;\n    private destroyCustomTicker?: (render: () => void) => void;\n    private _onRenderBind: () => void;\n    private _onResizeBind: () => void;\n    private _onScrollToBind: (event: MouseEvent) => void;\n\n    constructor({\n        lenisOptions = {},\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        autoResize = true,\n        autoStart = true,\n        scrollCallback = () => {},\n        initCustomTicker,\n        destroyCustomTicker,\n    }: ILocomotiveScrollOptions = {}) {\n        // Arguments\n        this.lenisOptions = { ...defaultLenisOptions, ...lenisOptions };\n\n        Object.assign(this, {\n            lenisOptions,\n            modularInstance,\n            triggerRootMargin,\n            rafRootMargin,\n            autoResize,\n            autoStart,\n            scrollCallback,\n            initCustomTicker,\n            destroyCustomTicker,\n        });\n\n        // Binding\n        this._onRenderBind = this._onRender.bind(this);\n        this._onScrollToBind = this._onScrollTo.bind(this);\n        this._onResizeBind = this._onResize.bind(this);\n\n        // Data\n        this.rafPlaying = false;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize instance.\n     *\n     * @private\n     */\n    private _init(): void {\n        // Create Lenis instance\n        this.lenisInstance = new Lenis({\n            wrapper: this.lenisOptions.wrapper,\n            content: this.lenisOptions.content,\n            eventsTarget: this.lenisOptions.eventsTarget,\n            lerp: this.lenisOptions.lerp,\n            duration: this.lenisOptions.duration,\n            orientation: this.lenisOptions.orientation,\n            gestureOrientation: this.lenisOptions.gestureOrientation,\n            smoothWheel: this.lenisOptions.smoothWheel,\n            syncTouch: this.lenisOptions.syncTouch,\n            syncTouchLerp: this.lenisOptions.syncTouchLerp,\n            touchInertiaMultiplier: this.lenisOptions.touchInertiaMultiplier,\n            wheelMultiplier: this.lenisOptions.wheelMultiplier,\n            touchMultiplier: this.lenisOptions.touchMultiplier,\n            easing: this.lenisOptions.easing,\n        });\n        this.lenisInstance?.on('scroll', this.scrollCallback);\n\n        // Add scroll direction attribute on body\n        document.documentElement.setAttribute(\n            'data-scroll-orientation',\n            this.lenisInstance.options.orientation\n        );\n\n        requestAnimationFrame(() => {\n            // Create Core Instance\n            this.coreInstance = new Core({\n                $el: this.lenisInstance.rootElement,\n                modularInstance: this.modularInstance,\n                triggerRootMargin: this.triggerRootMargin,\n                rafRootMargin: this.rafRootMargin,\n                scrollOrientation: this.lenisInstance.options.orientation,\n            });\n\n            // Bind Events\n            this._bindEvents();\n\n            // RAF warning\n            if (this.initCustomTicker && !this.destroyCustomTicker) {\n                console.warn(\n                    'initCustomTicker callback is declared, but destroyCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            } else if (!this.initCustomTicker && this.destroyCustomTicker) {\n                console.warn(\n                    'destroyCustomTicker callback is declared, but initCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            }\n\n            // Start RAF\n            this.autoStart && this.start();\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy instance.\n     */\n    public destroy(): void {\n        // Stop raf\n        this.stop();\n        // Unbind Events\n        this._unbindEvents();\n        // Destroy Lenis\n        this.lenisInstance.destroy();\n        // Destroy Core\n        this.coreInstance?.destroy();\n\n        // Ensure a delay before destroying to handle cases of instant destruction\n        requestAnimationFrame(() => {\n            this.coreInstance?.destroy();\n        });\n    }\n\n    /**\n     * Events - Subscribe events to listen.\n     */\n    private _bindEvents() {\n        this._bindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance = new RO({\n                    resizeElements: [document.body],\n                    resizeCallback: this._onResizeBind,\n                });\n            } else {\n                (window as any).addEventListener('resize', this._onResizeBind);\n            }\n        }\n    }\n\n    /**\n     * Events - Unsubscribe listened events.\n     */\n    private _unbindEvents() {\n        this._unbindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance && this.ROInstance.destroy();\n            } else {\n                (window as any).removeEventListener(\n                    'resize',\n                    this._onResizeBind\n                );\n            }\n        }\n    }\n\n    /**\n     * Events - Subscribe scrollTo events to listen.\n     */\n    private _bindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement): void => {\n                $el.addEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Events - Unsubscribe scrollTo listened events.\n     */\n    private _unbindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement) => {\n                $el.removeEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    private _onResize() {\n        // Waiting the next frame to get the new current scroll value return by Lenis\n        requestAnimationFrame(() => {\n            this.coreInstance?.onResize({\n                currentScroll: this.lenisInstance.scroll,\n            });\n        });\n    }\n\n    /**\n     * Callback - Render callback.\n     */\n    private _onRender() {\n        this.lenisInstance?.raf(Date.now());\n\n        this.coreInstance?.onRender({\n            currentScroll: this.lenisInstance.scroll,\n            smooth: this.lenisInstance.isSmooth,\n        });\n    }\n\n    /**\n     * Callback - Scroll To callback.\n     */\n    private _onScrollTo(event: MouseEvent) {\n        event.preventDefault();\n        const $target = (event.currentTarget as HTMLElement) ?? null;\n        if (!$target) return;\n        const target =\n            $target.getAttribute('data-scroll-to-href') ||\n            $target.getAttribute('href');\n        const offset = $target.getAttribute('data-scroll-to-offset') || 0;\n        const duration =\n            $target.getAttribute('data-scroll-to-duration') ||\n            this.lenisOptions.duration ||\n            defaultLenisOptions.duration;\n\n        target &&\n            this.scrollTo(target, {\n                offset: typeof offset === 'string' ? parseInt(offset) : offset,\n                duration:\n                    typeof duration === 'string'\n                        ? parseInt(duration)\n                        : duration,\n            });\n    }\n\n    /**\n     * Start RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public start(): void {\n        if (this.rafPlaying) {\n            return;\n        }\n\n        // Call lenis start method\n        this.lenisInstance?.start();\n\n        this.rafPlaying = true;\n        this.initCustomTicker\n            ? this.initCustomTicker(this._onRenderBind)\n            : this._raf();\n    }\n\n    /**\n     * Stop RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public stop(): void {\n        if (!this.rafPlaying) {\n            return;\n        }\n\n        // Call lenis stop method\n        this.lenisInstance?.stop();\n\n        this.rafPlaying = false;\n        this.destroyCustomTicker\n            ? this.destroyCustomTicker(this._onRenderBind)\n            : this.rafInstance && cancelAnimationFrame(this.rafInstance);\n    }\n\n    /**\n     * Remove old scroll elements items and rebuild ScrollElements instances.\n     */\n    public removeScrollElements($oldContainer: HTMLElement): void {\n        if (!$oldContainer) {\n            console.error('Please provide a DOM Element as $oldContainer');\n            return;\n        }\n\n        this._unbindScrollToEvents($oldContainer);\n        this.coreInstance?.removeScrollElements($oldContainer);\n    }\n\n    /**\n     * Add new scroll elements items and rebuild ScrollElements instances.\n     */\n    public addScrollElements($newContainer: HTMLElement): void {\n        if (!$newContainer) {\n            console.error('Please provide a DOM Element as $newContainer');\n            return;\n        }\n\n        this.coreInstance?.addScrollElements($newContainer);\n        requestAnimationFrame(() => {\n            this._bindScrollToEvents($newContainer);\n        });\n    }\n\n    /**\n     * Trigger resize callback.\n     */\n    public resize(): void {\n        this._onResizeBind();\n    }\n\n    /**\n     * Trigger scroll to callback.\n     */\n    public scrollTo(\n        target: lenisTargetScrollTo,\n        options?: ILenisScrollToOptions\n    ): void {\n        this.lenisInstance?.scrollTo(target, {\n            offset: options?.offset,\n            lerp: options?.lerp,\n            duration: options?.duration,\n            immediate: options?.immediate,\n            lock: options?.lock,\n            force: options?.force,\n            easing: options?.easing,\n            onComplete: options?.onComplete,\n        });\n    }\n\n    /**\n     * RequestAnimationFrame that active Lenis smooth and scroll progress.\n     *\n     * @private\n     *\n     */\n    private _raf() {\n        this._onRenderBind();\n        this.rafInstance = requestAnimationFrame(() => this._raf());\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}